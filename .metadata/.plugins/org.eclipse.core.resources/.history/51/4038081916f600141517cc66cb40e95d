package com.smith.datadriven.functions;



import java.util.Properties;
import java.util.concurrent.TimeUnit;

import junit.framework.Assert;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.safari.SafariDriver;
import org.openqa.selenium.support.events.EventFiringWebDriver;

public class Functionsbase {

	public static Properties CONFIG;
	public static Properties OR;
	
	public static String currentTest;
	public static String keyword;
	public static WebDriver driver= null;
	public static String object;

	
	public void openBrowser(String browserType) {
		System.out.println("Opening browser " + browserType);
		if (browserType.equalsIgnoreCase("firefox")) {
			driver = new FirefoxDriver();
		} else if (browserType.equalsIgnoreCase("Chrome")) {
			System.setProperty("webdriver.chrome.driver",
			System.getProperty("user.dir")+ "\\browser exe\\chromedriver.exe");
			driver = new ChromeDriver();
			// set the IE server exe path and initialize
		} else if (browserType.equalsIgnoreCase("IE")) {
			System.setProperty("WebDriver.IE.driver", 
			System.getProperty("user.dir")+ "\\browser exe\\IEDriverServer.exe");
			driver = new InternetExplorerDriver();
			
			// set the & initialize safari
		} else if (browserType.equalsIgnoreCase("safari")) {
				driver = new SafariDriver();
		}

		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);
	}

	public static String clickLink(){
		System.out.println("Executing clickLink");
		try{
		driver.findElement(By.xpath(OR.getProperty(object))).click();
		}catch(Throwable t){
			// report error
			System.out.println("Error while clicking on link -"+ object + t.getMessage());
			return "Fail - Link Not Found";
		}
		
		return "Pass";
	}
	
	public static String verifyText(){
		System.out.println("Executing verifyText");
		String expected=APPTEXT.getProperty(object);
		String actual=driver.findElement(By.xpath(OR.getProperty(object))).getText();
		System.out.println(expected);
		System.out.println(actual);
		try{
			Assert.assertEquals(expected.trim(), actual.trim());
					
		}catch(Throwable t){
			// error
			System.out.println("Error in text - "+object);
			System.out.println("Actual - "+actual);
			System.out.println("Expected -"+ expected);
			return "Fail -"+ t.getMessage(); 
			
		}
		
		return "Pass";
		
	}
	
	public static String input(){
		
		System.out.println("Executing input Keyword");
		// extract the test data
		String data =testData.getCellData(currentTest, data_column_name , testRepeat);
		
		
		try{
			driver.findElement(By.xpath(OR.getProperty(object))).sendKeys(data);
			}catch(Throwable t){
				// report error
				System.out.println("Error while wrinting into input -"+ object + t.getMessage());
				return "Fail - "+t.getMessage();
			}
			
			return "Pass";
	}
	
	
	public static String clickButton(){
		System.out.println("Executing clickButton Keyword");
		
		
		try{
			driver.findElement(By.xpath(OR.getProperty(object))).click();
			}catch(Throwable t){
				// report error
				System.out.println("Error while clicking on Button -"+ object + t.getMessage());
				return "Fail - "+t.getMessage();
			}
			
			return "Pass";
	}
	
	public static String select(){
		System.out.println("Executing select Keyword");
		// extract the test data
		String data =testData.getCellData(currentTest, data_column_name , testRepeat);
		
		
		
		try{
			driver.findElement(By.xpath(OR.getProperty(object))).sendKeys(data);
			}catch(Throwable t){
				// report error
				System.out.println("Error while Selecting from droplist -"+ object + t.getMessage());
				return "Fail - "+t.getMessage();
			}
			
			return "Pass";
	}
	
	public static String clickCheckBox(){
   System.out.println("Executing clickCheckBox Keyword");
		
		try{
			driver.findElement(By.xpath(OR.getProperty(object))).click();
			}catch(Throwable t){
				// report error
				System.out.println("Error while clicking on checkbox -"+ object + t.getMessage());
				return "Fail - "+t.getMessage();
			}
			
			return "Pass";
	}
	
	public static String Wait() throws NumberFormatException, InterruptedException{
	     System.out.println("Executing wait Keyword");
	  // extract the test data
			String data =testData.getCellData(currentTest, data_column_name , testRepeat);
			
	     Thread.sleep(Long.parseLong(data));
	     return "Pass";
	}
		
	

}
